{"version":3,"sources":["App.js","index.js"],"names":["renderD3","data","svg","legend","length","margin","top","right","bottom","left","height","minYear","d3","d","maxYear","xScale","domain","range","xAxis","ticks","tickFormat","yScale","yAxis","value","index","div","append","attr","style","main","current","call","selectAll","join","temperature","on","html","toFixed","pageX","pageY","console","log","legendMargin","legendHeight","tempColors","xLegendScale","xLegendAxis","legendMain","App","svgRef","useRef","legendRef","useEffect","fetch","then","response","json","result","className","id","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40bd810e.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport './App.css';\nimport * as d3 from 'd3'\n\nfunction App() {\n  const svgRef = useRef();\n  const legendRef = useRef(); //For the legend\n\n  useEffect(() => {\n    fetch(\"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json\")\n      .then(response => response.json())\n      .then(\n        (result) => {\n          renderD3(result[\"monthlyVariance\"], svgRef, legendRef)\n        }\n      )\n\n  }, [])\n  return (\n    <div className=\"container\">\n      <h1 id=\"title\">Monthly Global Land-Surface Temperature</h1>\n      <h3 id=\"description\">1753 - 2015: base temperature 8.66â„ƒ</h3>\n      <svg ref={svgRef}></svg>\n      <svg id=\"legend\" ref={legendRef}></svg>\n    </div>\n  );\n}\n\n\nconst renderD3 = (data, svg, legend) => {\n  if (data.length > 1) {\n\n    // Set main SVG area values\n    let margin = {top: 20, right: 20, bottom: 50, left: 60};\n    let height = 500 - margin.top - margin.bottom;\n    let width = 1200;\n\n    // Min Max Year\n    let minYear = d3.min(data, d => d[\"year\"]);\n    let maxYear = d3.max(data, d => d[\"year\"]);\n\n    // Min Max Month\n    let minMonth = d3.min(data, d => d[\"month\"])\n    let maxMonth = d3.max(data, d => d[\"month\"])\n\n    // Set xScale and X-Axis\n    let xScale = d3.scaleLinear()\n                   .domain([minYear, maxYear])\n                   .range([0, width]);\n\n    let xAxis = d3.axisBottom(xScale).ticks(25).tickFormat(d3.format('d'));\n              \n    // Set yScale and Y-Axis\n     const ticks = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n     \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    let yScale = d3.scaleBand()\n                   .domain([0,1,2,3,4,5,6,7,8,9,10,11])\n                   .range([0, height]);\n\n    // const ticks = {1: \"January\", 2: \"February\", 3: \"March\", 4: \"April\", 5: \"May\", 6: \"June\", \n    //               7: \"July\", 8: \"August\", 9: \"September\", 10: \"October\", 11: \"November\", 12: \"December\"};\n\n  \n\n    let yAxis = d3.axisLeft(yScale).tickFormat((value, index) => { return ticks[value] });\n\n\n\n    let div = d3.select(\".container\").append(\"div\")\n                .attr(\"class\", \"tooltip\")\n                .attr(\"id\", \"tooltip\")\n                .style(\"opacity\", 0)\n\n    // Full SVG Area\n    let chart = d3.select(svg.current)\n                  .attr(\"width\", width + margin.right + margin.left)\n                  .attr(\"height\", height + margin.top + margin.bottom);\n\n            \n    // Main SVG Area that will contain our information\n    let main = chart.append('g')\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .attr(\"class\", \"main\");\n\n\n    // Render X Axis\n    main.append('g')\n        .attr(\"id\", \"x-axis\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(xAxis);\n\n    // Render Y Axis\n    main.append('g')\n        .attr(\"id\", \"y-axis\")\n        .call(yAxis);\n\n\n    \n    main\n      .selectAll('.cell')\n      .data(data)\n      .join(\"rect\")\n      .attr(\"class\", \"cell\")\n      .attr(\"data-month\", value => value[\"month\"]-1)\n      .attr(\"data-year\", value => value[\"year\"])\n      .attr(\"data-temp\", value => value[\"variance\"])\n      .attr(\"width\", width/(maxYear - minYear))\n      .attr(\"height\", height/12)\n      .attr(\"x\", value => xScale(value[\"year\"])+1)\n      .attr(\"y\", value => yScale(value[\"month\"]-1))\n      .attr(\"fill\", value => {\n        let temperature = (value[\"variance\"] + 8.66)\n        if (temperature < 2.8) {\n          return \"rgb(49, 54, 149)\";\n        } else if (temperature < 3.9 && temperature >= 2.8) {\n          return \"rgb(69, 117, 180)\";\n        } else if (temperature < 5.0 && temperature >= 3.9) {\n          return \"rgb(116, 173, 209)\";\n        } else if (temperature < 6.1 && temperature >= 5.0) {\n          return \"rgb(171, 217, 233)\";\n        } else if (temperature < 7.2 && temperature >= 6.1) {\n          return \"rgb(224, 243, 248)\";\n        } else if (temperature < 8.3 && temperature >= 7.2) {\n          return \"rgb(255, 255, 191)\";\n        } else if (temperature < 9.5 && temperature >= 8.3) {\n          return \"rgb(254, 224, 144)\";\n        } else if (temperature < 10.6 && temperature >= 9.5) {\n          return \"rgb(253, 174, 97)\";\n        } else if (temperature < 11.7 && temperature >= 10.6) {\n          return \"rgb(244, 109, 67)\";\n        } else if (temperature < 12.8 && temperature >= 11.7) {\n          return \"rgb(215, 48, 39)\";\n        } else {\n          return \"rgb(165, 0, 38)\";\n        }\n      })\n      .on(\"mouseover\", value => {\n        div.style(\"opacity\", 0.7)\n        div.html(value[\"year\"] + \" - \" + ticks[value[\"month\"]-1] + \"<br/>\"\n        + (value[\"variance\"] + 8.66).toFixed(1) + \"<br/>\" + value[\"variance\"].toFixed(1))\n        .style(\"left\", (d3.event.pageX) - 30 + \"px\")\n        .style(\"top\", (d3.event.pageY - 120) + \"px\")\n        .style(\"display\", \"inline\")\n        .attr(\"data-year\", value[\"year\"])\n        console.log(value)\n      })\n      .on(\"mouseleave\", () => { div.style(\"opacity\", 0).style(\"top\", 0).style(\"display\", \"none\") })\n\n\n    \n    // Legend\n\n    // Set main SVG area values\n    let legendMargin = {top: 20, right: 20, bottom: 50, left: 15};\n    let legendHeight = 100 - legendMargin.top - legendMargin.bottom;\n    let legendWidth = 300;\n    let temps = [\"<2.8\", 3.9, 5.0, 6.1, 7.2, 8.3, 9.5, 10.6, 11.7, 12.8, '12.8+'];\n    let tempColors = [\"rgb(49, 54, 149)\", \"rgb(69, 117, 180)\", \"rgb(116, 173, 209)\", \"rgb(171, 217, 233)\", \n    \"rgb(224, 243, 248)\", \"rgb(255, 255, 191)\", \"rgb(254, 224, 144)\", \"rgb(253, 174, 97)\",\n    \"rgb(244, 109, 67)\", \"rgb(215, 48, 39)\", \"rgb(165, 0, 38)\"];\n\n    let xLegendScale = d3.scaleBand()\n                   .domain([\"<2.8\", 3.9, 5.0, 6.1, 7.2, 8.3, 9.5, 10.6, 11.7, 12.8, '12.8+'])\n                   .range([0, legendWidth]);\n\n    let xLegendAxis = d3.axisBottom(xLegendScale).ticks(9)\n\n    // Full SVG Area\n    let legendChart = d3.select(legend.current)\n                  .attr(\"width\", legendWidth + legendMargin.right + legendMargin.left)\n                  .attr(\"height\", legendHeight + legendMargin.top + legendMargin.bottom);\n\n            \n    // Main SVG Area that will contain our information\n    let legendMain = legendChart.append('g')\n                    .attr(\"transform\", `translate(${legendMargin.left}, ${legendMargin.top})`)\n                    .attr(\"width\", legendWidth)\n                    .attr(\"height\", legendHeight)\n                    .attr(\"class\", \"main\");\n\n    // Render X Axis\n    legendMain.append('g')\n        .attr(\"id\", \"x-Legendaxis\")\n        .attr(\"transform\", `translate(0, ${legendHeight})`)\n        .call(xLegendAxis);\n\n\n        legendMain\n        .selectAll('.temps')\n        .data(temps)\n        .join(\"rect\")\n        .attr(\"class\", \"temps\")\n        .attr(\"width\", 20 )\n        .attr(\"height\", 10)\n        .attr(\"x\", value => xLegendScale(value) + 5)\n        .attr(\"y\", legendHeight - 10)\n        .attr(\"fill\", (value, index) => tempColors[index])\n  }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}